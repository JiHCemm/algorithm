package com.algorithm.util;

import com.algorithm.sort.BubbleSort;
import com.algorithm.sort.InsertionSort;
import com.algorithm.sort.SelectionSort;
import com.algorithm.sort.ShellSort;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.util.StopWatch;

import java.util.Arrays;

/**
 * @author JiHC
 * @since 2020/8/25
 */
public class ArrayUtils {

    private static Log log = LogFactory.getLog (ArrayUtils.class);

    public static void main(String[] args) {

        int size = 20;// 数组长度(0 - 100)
        int value = 100;// 值大小(+-100)
        StopWatch stopWatch = new StopWatch ("所用毫秒数");// spring计时器
        StringBuilder sb = new StringBuilder ();

        //================ 原数组 ================
        // 一维数组 : 数组中每个元素都只带有一个下标
        stopWatch.start ("生成数组");
        int[] arr = ArrayUtils.generateRandomArray (size, value);    // 1000条顺序数据
//        int[]arr=new int[]{ -923,-920,-891,-877,-858,-825,-813,-808,-800,-798,-795,-791,-790,-789,-778,-775,-775,-773,-766,-763,-757,-756,-753,-747,-746,-739,-731,-731,-725,-723,-720,-716,-709,-707,-705,-703,-703,-695,-689,-681,-673,-666,-657,-656,-656,-648,-644,-641,-640,-637,-637,-634,-631,-629,-629,-626,-621,-619,-619,-619,-619,-618,-616,-615,-615,-614,-608,-607,-604,-602,-601,-599,-598,-596,-590,-589,-588,-587,-583,-582,-579,-578,-577,-576,-575,-571,-570,-570,-569,-567,-565,-565,-564,-554,-552,-549,-549,-547,-546,-546,-544,-543,-542,-541,-541,-540,-539,-538,-534,-534,-533,-531,-531,-527,-527,-526,-518,-518,-517,-517,-516,-516,-515,-513,-509,-508,-501,-499,-498,-497,-496,-493,-489,-486,-484,-482,-480,-479,-477,-477,-472,-472,-471,-468,-467,-464,-460,-454,-452,-451,-450,-448,-442,-437,-436,-433,-432,-431,-428,-426,-420,-420,-418,-415,-415,-412,-412,-405,-404,-404,-403,-402,-399,-397,-396,-393,-393,-388,-388,-386,-386,-385,-384,-384,-384,-381,-381,-378,-378,-371,-366,-359,-356,-355,-352,-351,-351,-347,-347,-345,-345,-344,-343,-343,-343,-341,-340,-338,-335,-331,-330,-329,-326,-325,-322,-321,-321,-320,-318,-316,-316,-315,-313,-309,-309,-306,-303,-302,-301,-301,-295,-295,-294,-294,-292,-291,-289,-288,-287,-286,-285,-285,-280,-280,-279,-278,-273,-272,-269,-269,-268,-268,-266,-263,-262,-260,-258,-257,-255,-255,-254,-254,-253,-250,-250,-247,-247,-243,-239,-238,-237,-237,-235,-234,-233,-231,-230,-230,-229,-227,-226,-225,-225,-224,-223,-223,-223,-221,-220,-220,-219,-218,-217,-217,-217,-217,-215,-215,-213,-213,-210,-210,-209,-207,-207,-202,-202,-202,-201,-201,-200,-200,-200,-199,-199,-198,-196,-196,-195,-195,-194,-194,-192,-192,-189,-188,-187,-187,-185,-184,-183,-181,-175,-175,-175,-173,-169,-167,-166,-165,-163,-162,-162,-160,-159,-159,-158,-158,-157,-154,-154,-154,-154,-154,-153,-152,-150,-150,-148,-148,-148,-146,-146,-146,-145,-144,-143,-142,-142,-140,-139,-139,-137,-136,-135,-134,-134,-134,-133,-133,-133,-131,-129,-128,-128,-127,-126,-126,-124,-123,-123,-123,-122,-122,-120,-120,-116,-115,-113,-111,-106,-106,-105,-105,-104,-99,-99,-99,-97,-97,-95,-92,-90,-90,-89,-89,-86,-85,-85,-85,-81,-80,-78,-78,-78,-76,-76,-75,-73,-73,-73,-70,-68,-67,-66,-65,-65,-65,-63,-63,-61,-58,-57,-56,-53,-53,-53,-52,-52,-51,-51,-51,-51,-49,-48,-47,-45,-44,-43,-42,-37,-36,-35,-35,-35,-35,-33,-32,-30,-29,-29,-27,-25,-25,-24,-23,-22,-22,-22,-21,-20,-19,-18,-18,-17,-15,-14,-13,-10,-5,-5,-3,-2,-1,-1,-1,1,2,3,4,4,4,4,5,6,6,13,13,15,16,17,17,18,18,19,20,21,22,22,23,25,25,25,26,26,28,29,31,32,34,35,36,36,36,37,38,38,39,40,41,42,44,45,47,47,48,49,49,51,51,52,53,56,56,57,59,60,60,61,62,62,62,64,64,66,67,67,70,70,71,72,72,72,73,74,76,77,78,80,80,80,80,80,82,82,83,83,83,84,86,89,89,90,90,90,91,93,94,96,98,100,101,103,103,103,104,105,105,106,111,112,112,112,116,117,117,118,119,120,123,124,125,125,126,128,128,130,130,132,132,135,135,135,138,140,141,141,143,143,144,144,145,146,146,147,147,147,148,149,150,151,152,152,154,157,157,158,159,160,161,162,163,168,169,169,171,172,174,175,176,176,180,180,183,183,186,187,188,188,188,192,193,193,194,194,195,195,195,196,200,200,201,206,206,207,207,208,208,209,210,210,211,211,213,213,213,218,222,224,224,226,226,226,228,229,230,231,231,231,233,237,237,239,240,248,250,250,251,254,255,256,258,258,260,261,262,269,270,271,271,277,278,280,281,286,286,287,287,289,292,292,293,293,296,297,300,306,307,309,309,310,311,313,316,317,318,318,321,322,323,325,326,330,331,332,332,333,335,337,337,342,345,350,350,351,351,353,353,354,355,356,359,359,360,360,361,364,372,373,373,376,376,376,378,378,380,385,393,394,396,398,398,400,403,404,404,406,409,410,413,414,415,416,418,420,423,423,427,428,432,433,434,438,438,441,441,443,443,444,445,448,449,450,451,452,452,454,455,456,456,457,458,462,463,465,466,466,467,469,469,469,470,471,475,476,478,479,487,489,491,493,493,493,496,496,497,498,503,506,508,509,510,511,512,513,515,516,521,522,524,528,529,535,537,541,541,542,550,553,555,558,560,561,562,563,563,564,569,569,572,572,573,574,575,576,577,579,579,581,585,586,591,592,597,602,604,615,616,618,619,621,621,624,624,626,638,643,645,650,663,664,666,672,677,677,680,688,688,688,694,703,705,705,708,708,714,714,718,725,726,729,731,732,735,738,739,745,745,745,747,750,762,769,784,785,792,797,799,817,818,821,823,825,834,834,835,847,851,852,864,865,868,877,892,895,896,904,912,913,935};
        stopWatch.stop ();
        sb.append ("\n").append (arrayToString ("原数组 : ", arr));

        // 数组长度小于2,则默认有序
        if (arr.length < 2) {
            return;
        }

        // 对象拷贝 : 一维数组：深克隆；（重新分配空间，并将元素复制过去） 二维数组：浅克隆。（只传递引用）
        int[] bubbleArr = arr.clone ();// 进行冒泡排序的数组
        int[] selectionArr = arr.clone ();// 进行选择排序的数组
        int[] insertArr = arr.clone ();// 进行选择排序的数组
        int[] shellArr = arr.clone ();// 进行希尔排序的数组
        int[] systemArr = arr.clone ();// 进行系统排序的数组

        //================ 冒泡排序 ================
        stopWatch.start ("冒泡排序");
        BubbleSort.sort (bubbleArr);
        stopWatch.stop ();
        sb.append ("\n\n").append (arrayToString ("冒泡排序 : ",bubbleArr));

        //================ 选择排序 ================
        stopWatch.start ("选择排序");
        SelectionSort.sort (selectionArr);
        stopWatch.stop ();
        sb.append ("\n").append (arrayToString ("选择排序 : ",selectionArr));

        //================ 插入排序 ================
        stopWatch.start ("插入排序");
        InsertionSort.sort (insertArr);
        stopWatch.stop ();
        sb.append ("\n").append (arrayToString ("插入排序 : ",insertArr));

        //================ 希尔排序 ================
        stopWatch.start ("希尔排序");
        ShellSort.sort (shellArr);
        stopWatch.stop ();
        sb.append ("\n").append (arrayToString ("希尔排序 : ",shellArr));

        //================ Arrays.sort() ================
        // 绝对正确的方法,这个方法可以时间复杂度很差，但是要保证其准确性
        stopWatch.start ("Arrays.sort()");
        Arrays.sort (systemArr);// 调用系统的函数来进行验证
        stopWatch.stop ();
        sb.append ("\n").append (arrayToString ("Arrays.sort() : ",systemArr));
        sb.append ("\n").append (stopWatch.prettyPrint ());
        log.info (sb);

    }

    /**
     * 生成一个对数器。产生一个随机样本的数组，数组的长度和值都是随机的
     *
     * @param size  数组长度范围(0-size)
     * @param value 数组值范围(+-value)
     * @return
     */
    private static int[] generateRandomArray(int size, int value) {
        // 生成长度随机的数组，数组的最大长度是size的长度
//        int[] arr = new int[(int) ((size + 1) * Math.random ())];
        int[] arr = new int[size];
        for (int i = 0; i < arr.length; i++) {
            //针对数组中的每个值都可以随机一下，一个随机数减去另外一个随机数，可能产生正数，也可能产生负数
            arr[i] = (int) ((value + 1) * Math.random ()) - (int) (value * Math.random ());
        }
        return arr;
    }

    /**
     * 数组转字符串
     *
     * @param description 描述
     * @param arr         数组
     * @return
     */
    public static StringBuilder arrayToString(String description, int[] arr) {
        StringBuilder sb = new StringBuilder (description).append ('[');
        for (int value : arr) {
            sb.append (value).append (",");
        }
        String str = sb.substring (0, sb.length () - 1);
        sb.delete (0, sb.length ());
        sb.append (str).append (']');
        return sb;
    }
}
